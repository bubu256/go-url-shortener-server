// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: proto/shortner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandlerServiceClient is the client API for HandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandlerServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	URLtoShort(ctx context.Context, in *URLtoShortRequest, opts ...grpc.CallOption) (*URLtoShortResponse, error)
	ShortToURL(ctx context.Context, in *ShortToURLRequest, opts ...grpc.CallOption) (*ShortToURLResponse, error)
	APIShortenBatch(ctx context.Context, in *APIShortenBatchRequest, opts ...grpc.CallOption) (*APIShortenBatchResponse, error)
	APIShorten(ctx context.Context, in *APIShortenRequest, opts ...grpc.CallOption) (*APIShortenResponse, error)
	APIUserAllURLs(ctx context.Context, in *APIUserAllURLsRequest, opts ...grpc.CallOption) (*APIUserAllURLsResponse, error)
	APIDeleteUrls(ctx context.Context, in *APIDeleteUrlsRequest, opts ...grpc.CallOption) (*APIDeleteUrlsResponse, error)
	APIInternalStats(ctx context.Context, in *APIInternalStatsRequest, opts ...grpc.CallOption) (*APIInternalStatsResponse, error)
	TokenHandler(ctx context.Context, in *TokenHandlerRequest, opts ...grpc.CallOption) (*TokenHandlerResponse, error)
}

type handlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerServiceClient(cc grpc.ClientConnInterface) HandlerServiceClient {
	return &handlerServiceClient{cc}
}

func (c *handlerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) URLtoShort(ctx context.Context, in *URLtoShortRequest, opts ...grpc.CallOption) (*URLtoShortResponse, error) {
	out := new(URLtoShortResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/URLtoShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) ShortToURL(ctx context.Context, in *ShortToURLRequest, opts ...grpc.CallOption) (*ShortToURLResponse, error) {
	out := new(ShortToURLResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/ShortToURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) APIShortenBatch(ctx context.Context, in *APIShortenBatchRequest, opts ...grpc.CallOption) (*APIShortenBatchResponse, error) {
	out := new(APIShortenBatchResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/APIShortenBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) APIShorten(ctx context.Context, in *APIShortenRequest, opts ...grpc.CallOption) (*APIShortenResponse, error) {
	out := new(APIShortenResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/APIShorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) APIUserAllURLs(ctx context.Context, in *APIUserAllURLsRequest, opts ...grpc.CallOption) (*APIUserAllURLsResponse, error) {
	out := new(APIUserAllURLsResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/APIUserAllURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) APIDeleteUrls(ctx context.Context, in *APIDeleteUrlsRequest, opts ...grpc.CallOption) (*APIDeleteUrlsResponse, error) {
	out := new(APIDeleteUrlsResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/APIDeleteUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) APIInternalStats(ctx context.Context, in *APIInternalStatsRequest, opts ...grpc.CallOption) (*APIInternalStatsResponse, error) {
	out := new(APIInternalStatsResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/APIInternalStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerServiceClient) TokenHandler(ctx context.Context, in *TokenHandlerRequest, opts ...grpc.CallOption) (*TokenHandlerResponse, error) {
	out := new(TokenHandlerResponse)
	err := c.cc.Invoke(ctx, "/proto.HandlerService/TokenHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlerServiceServer is the server API for HandlerService service.
// All implementations must embed UnimplementedHandlerServiceServer
// for forward compatibility
type HandlerServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	URLtoShort(context.Context, *URLtoShortRequest) (*URLtoShortResponse, error)
	ShortToURL(context.Context, *ShortToURLRequest) (*ShortToURLResponse, error)
	APIShortenBatch(context.Context, *APIShortenBatchRequest) (*APIShortenBatchResponse, error)
	APIShorten(context.Context, *APIShortenRequest) (*APIShortenResponse, error)
	APIUserAllURLs(context.Context, *APIUserAllURLsRequest) (*APIUserAllURLsResponse, error)
	APIDeleteUrls(context.Context, *APIDeleteUrlsRequest) (*APIDeleteUrlsResponse, error)
	APIInternalStats(context.Context, *APIInternalStatsRequest) (*APIInternalStatsResponse, error)
	TokenHandler(context.Context, *TokenHandlerRequest) (*TokenHandlerResponse, error)
	mustEmbedUnimplementedHandlerServiceServer()
}

// UnimplementedHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHandlerServiceServer struct {
}

func (UnimplementedHandlerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHandlerServiceServer) URLtoShort(context.Context, *URLtoShortRequest) (*URLtoShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method URLtoShort not implemented")
}
func (UnimplementedHandlerServiceServer) ShortToURL(context.Context, *ShortToURLRequest) (*ShortToURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortToURL not implemented")
}
func (UnimplementedHandlerServiceServer) APIShortenBatch(context.Context, *APIShortenBatchRequest) (*APIShortenBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIShortenBatch not implemented")
}
func (UnimplementedHandlerServiceServer) APIShorten(context.Context, *APIShortenRequest) (*APIShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIShorten not implemented")
}
func (UnimplementedHandlerServiceServer) APIUserAllURLs(context.Context, *APIUserAllURLsRequest) (*APIUserAllURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIUserAllURLs not implemented")
}
func (UnimplementedHandlerServiceServer) APIDeleteUrls(context.Context, *APIDeleteUrlsRequest) (*APIDeleteUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIDeleteUrls not implemented")
}
func (UnimplementedHandlerServiceServer) APIInternalStats(context.Context, *APIInternalStatsRequest) (*APIInternalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIInternalStats not implemented")
}
func (UnimplementedHandlerServiceServer) TokenHandler(context.Context, *TokenHandlerRequest) (*TokenHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenHandler not implemented")
}
func (UnimplementedHandlerServiceServer) mustEmbedUnimplementedHandlerServiceServer() {}

// UnsafeHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandlerServiceServer will
// result in compilation errors.
type UnsafeHandlerServiceServer interface {
	mustEmbedUnimplementedHandlerServiceServer()
}

func RegisterHandlerServiceServer(s grpc.ServiceRegistrar, srv HandlerServiceServer) {
	s.RegisterService(&HandlerService_ServiceDesc, srv)
}

func _HandlerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_URLtoShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLtoShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).URLtoShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/URLtoShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).URLtoShort(ctx, req.(*URLtoShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_ShortToURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortToURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).ShortToURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/ShortToURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).ShortToURL(ctx, req.(*ShortToURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_APIShortenBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).APIShortenBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/APIShortenBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).APIShortenBatch(ctx, req.(*APIShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_APIShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).APIShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/APIShorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).APIShorten(ctx, req.(*APIShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_APIUserAllURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserAllURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).APIUserAllURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/APIUserAllURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).APIUserAllURLs(ctx, req.(*APIUserAllURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_APIDeleteUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIDeleteUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).APIDeleteUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/APIDeleteUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).APIDeleteUrls(ctx, req.(*APIDeleteUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_APIInternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIInternalStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).APIInternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/APIInternalStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).APIInternalStats(ctx, req.(*APIInternalStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerService_TokenHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServiceServer).TokenHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HandlerService/TokenHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServiceServer).TokenHandler(ctx, req.(*TokenHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HandlerService_ServiceDesc is the grpc.ServiceDesc for HandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HandlerService",
	HandlerType: (*HandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HandlerService_Ping_Handler,
		},
		{
			MethodName: "URLtoShort",
			Handler:    _HandlerService_URLtoShort_Handler,
		},
		{
			MethodName: "ShortToURL",
			Handler:    _HandlerService_ShortToURL_Handler,
		},
		{
			MethodName: "APIShortenBatch",
			Handler:    _HandlerService_APIShortenBatch_Handler,
		},
		{
			MethodName: "APIShorten",
			Handler:    _HandlerService_APIShorten_Handler,
		},
		{
			MethodName: "APIUserAllURLs",
			Handler:    _HandlerService_APIUserAllURLs_Handler,
		},
		{
			MethodName: "APIDeleteUrls",
			Handler:    _HandlerService_APIDeleteUrls_Handler,
		},
		{
			MethodName: "APIInternalStats",
			Handler:    _HandlerService_APIInternalStats_Handler,
		},
		{
			MethodName: "TokenHandler",
			Handler:    _HandlerService_TokenHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortner.proto",
}
