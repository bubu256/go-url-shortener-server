package staticlint

import (
	"encoding/json"
	"fmt"
	"go/ast"
	"os"
	"path/filepath"

	"golang.org/x/tools/go/analysis"
	"golang.org/x/tools/go/analysis/multichecker"
	"golang.org/x/tools/go/analysis/passes/printf"
	"golang.org/x/tools/go/analysis/passes/shadow"
	"golang.org/x/tools/go/analysis/passes/structtag"
	"honnef.co/go/tools/quickfix"
	"honnef.co/go/tools/staticcheck"
	"honnef.co/go/tools/stylecheck"
)

// Config — имя файла конфигурации.
const Config = `config.json`

// ConfigData описывает структуру файла конфигурации.
type ConfigData struct {
	Staticcheck []string
}

// Анализатор ExitCheckAnalyzer, ищет прямой вызовы функции os.Exit в анализируемых файлах
var ExitCheckAnalyzer = &analysis.Analyzer{
	Name: "exitcheck",
	Doc:  "reports any use of os.Exit",
	Run:  exitFuncAnalyzerRun,
}

func exitFuncAnalyzerRun(pass *analysis.Pass) (interface{}, error) {
	//	именование внешнего цикла требуется для перехода к следующему файлу в случае обнаружения соответствующего комментария
FILESLOOP:
	for _, file := range pass.Files {
		// Пропускаем файлы, с комментарием "// Code generated by 'go test'. DO NOT EDIT."
		// при запуске на всем проекте попадаются сгенерированные файлы использующие os.Exit
		// им можно - пропускаем
		if file.Comments != nil {
			for _, comment := range file.Comments {
				if comment.Text() == "Code generated by 'go test'. DO NOT EDIT.\n" {
					continue FILESLOOP
				}
			}
		}

		ast.Inspect(file, func(n ast.Node) bool {
			// Если узел является вызовом функции
			call, ok := n.(*ast.CallExpr)
			if !ok {
				return true
			}
			// Если вызов функции является os.Exit
			selector, ok := call.Fun.(*ast.SelectorExpr)
			if !ok {
				return true
			}
			if ident, ok := selector.X.(*ast.Ident); ok && ident.Name == "os" && selector.Sel.Name == "Exit" {
				pass.Reportf(ident.NamePos, "avoid using os.Exit")
			}
			return true
		})
	}
	return nil, nil
}

func main() {

	appfile, err := os.Executable()
	if err != nil {
		fmt.Println("Ошибка при получении получении каталога запуска.")
		panic(err)
	}

	data, err := os.ReadFile(filepath.Join(filepath.Dir(appfile), Config))
	if err != nil {
		fmt.Println("Ошибка при открытии файла конфигурации.")
		panic(err)
	}
	var cfg ConfigData
	if err = json.Unmarshal(data, &cfg); err != nil {
		fmt.Println("Ошибка при чтении фала конфигурации.")
		panic(err)
	}
	mychecks := []*analysis.Analyzer{
		ExitCheckAnalyzer,
		printf.Analyzer,
		shadow.Analyzer,
		structtag.Analyzer,
	}
	checks := make(map[string]bool)
	for _, v := range cfg.Staticcheck {
		checks[v] = true
	}

	// добавляем анализаторы из staticcheck, которые указаны в файле конфигурации
	// содержит анализаторы SA
	for _, v := range staticcheck.Analyzers {
		if checks[v.Analyzer.Name] || checks[v.Analyzer.Name[:2]] {
			mychecks = append(mychecks, v.Analyzer)
		}
	}
	// добавляем анализаторы из quickfix, которые указаны в файле конфигурации
	// содержит анализаторы QF*
	for _, v := range quickfix.Analyzers {
		if checks[v.Analyzer.Name] || checks[v.Analyzer.Name[:2]] {
			mychecks = append(mychecks, v.Analyzer)
		}
	}
	// добавляем анализаторы из quickfix, которые указаны в файле конфигурации
	// содержит анализаторы ST*
	for _, v := range stylecheck.Analyzers {
		if checks[v.Analyzer.Name] || checks[v.Analyzer.Name[:2]] {
			mychecks = append(mychecks, v.Analyzer)
		}
	}

	multichecker.Main(
		mychecks...,
	)
	// для проверки собственного чекера
	// os.Exit(0)
}
